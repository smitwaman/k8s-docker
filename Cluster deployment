
## Prerequisites
1. 2 or 3 Ubuntu 18.04/16.04 LTS System with Minimal Installation
2. Minimum 2 or more CPU, 3 GB RAM.
3. Disable SWAP on All node
4. SSH Access with sudo privileges



## Firewall Ports/Inbound Traffic Ports for Kubernetes Cluster
Control-plane node(s)
Protocol	Direction	Port Range	Purpose	Used By
TCP	Inbound	6443*	Kubernetes API server	All
TCP	Inbound	2379-2380	etcd server client API	kube-apiserver, etcd
TCP	Inbound	10250	Kubelet API	Self, Control plane
TCP	Inbound	10251	kube-scheduler	Self
TCP	Inbound	10252	kube-controller-manager	Self


Worker node(s)
Protocol	Direction	Port Range	Purpose	Used By
TCP	Inbound	10250	Kubelet API	Self, Control plane
TCP	Inbound	30000-32767	NodePort Services†	All

Commands 

Step 1: Disable swap

$ swapoff -a

Also comment out the reference to swap in /etc/fstab. Start by editing the below file:

$ sudo nano /etc/fstab

Reboot the system to take effect

$ sudo reboot

Step 2: Install docker

Update the system Packages

$ sudo apt-get update

Install Docker on All node
Install docker on both master and worker node

$ sudo apt-get install -y docker.io
OR

You can install docker by script as shown below

$ curl -fsSL https://get.docker.com -o get-docker.sh 
$ sh get-docker.sh

Check docker images
$ docker images

ERROR:

(Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get http://%2Fvar%2Frun%2Fdocker.sock/v1.40/images/json: dial unix /var/run/docker.sock: connect: permission denied

Solution:

Add the docker user in group and give permission for docker.sock

$ sudo usermod -aG docker $USER
Change the docker.sock permission

$ sudo chmod 666 /var/run/docker.sock

Start the Docker service if not started
$ sudo systemctl enable docker.service

To check the docker service status
$ sudo systemctl status docker.service

Enable Docker service at startup
$ sudo systemctl enable docker.service


Step 3: Install HTTPS Support on All node

Install HTTPS support package on all node

$ sudo apt-get install -y apt-transport-https


Step 3: Install CURL on All node
Install curl on master node if not installed

$ sudo apt-get install curl

Step 4: Add Kubernetes GPG Key on All node

$ curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -

Step 5: Add Kubernetes APT Repository on All node

Add Kubernetes apt repository on all node for Ubuntu.
$ sudo apt-add-repository "deb http://apt.kubernetes.io/ kubernetes-xenial main"

Step 6: Install Kubeadm,Kubelet and Kubectl on All Node
Install kubeadm,kubelet and kubectl using below command.

$ sudo apt-get install -y kubelet kubeadm kubectl
$ sudo apt-mark hold kubelet kubeadm kubectl

Step 7: Configure cggroup driver

add the cggroup driver in kubelet

$ sudo sed -i "s/cgroup-driver=systemd/cgroup-driver=cgroupfs/g" /etc/systemd/system/kubelet.service.d/10-kubeadm.conf

Step 8: Reload the daemon

$ sudo systemctl daemon-reload

Restart the kubelet service

$ sudo systemctl restart kubelet


" To start using your cluster, you need to run the following as a regular user:

 mkdir -p $HOME/.kube

 sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config

 sudo chown $(id -u):$(id -g) $HOME/.kube/config

You should now deploy a pod network to the cluster.

Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:

  https://kubernetes.io/docs/concepts/cluster-administration/addons/

Then you can join any number of worker nodes by running the following on each as root:

kubeadm join 172.31.16.86:6443 --token 2qmwga.qyejfbo9vouiowlt \

    --discovery-token-ca-cert-hash sha256:083a2a20c8de9254100f1b37b4be1999946aee6f34791985c80d9eced9618e94" 

As above output mentioned copy the token in your notepad, we will need to join worker/slave to master node


Create new ‘.kube’ configuration directory and copy the configuration ‘admin.conf’ from ‘/etc/kubernetes’ directory.

$ sudo mkdir -p $HOME/.kube
$ sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
$ sudo chown $(id -u):$(id -g) $HOME/.kube/config

To check kubeadm version.

$ kubeadm version

To check master node status

$ kubectl get nodes

Configure Pod Network and Verify Pod namespaces

Step 9: Install the Weave network plugin to communicate master and worker nodes.

$ kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"

Join Worker Node to the Cluster
Next Join two worker nodes to master.

$ sudo kubeadm join 172.31.16.86:6443 --token 2qmwga.qyejfbo9vouiowlt \     --discovery-token-ca-cert-hash             sha256:083a2a20c8de9254100f1b37b4be1999946aee6f34791985c80d9eced9618e94

Step 10: To Verify Pod namespaces

$ sudo kubectl get pods --all-namespaces


